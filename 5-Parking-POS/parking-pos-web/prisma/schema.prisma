generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VehicleType {
  CAR
  MOTORCYCLE
  TRUCK
  BUS
}

enum PaymentMethod {
  CASH
  QRIS
  EMONEY
  FLAZZ
  BRIZZI
  MEMBER_BALANCE
}

enum ParkingStatus {
  ACTIVE
  COMPLETED
}

enum MemberType {
  REGULAR
  SILVER
  GOLD
  PLATINUM
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("operator")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  checkIns  ParkingTransaction[] @relation("CheckInOperator")
  checkOuts ParkingTransaction[] @relation("CheckOutOperator")
}

model Member {
  id          Int        @id @default(autoincrement())
  memberCode  String     @unique
  name        String
  email       String     @unique
  phone       String?    @unique
  balance     Decimal    @default(0)
  memberType  MemberType @default(REGULAR)
  isActive    Boolean    @default(true)
  joinDate    DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  vehicles     Vehicle[]
  transactions ParkingTransaction[]
  topUps       TopUpTransaction[]
}

model Vehicle {
  id          Int      @id @default(autoincrement())
  plateNumber String   @unique
  memberId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  member       Member?              @relation(fields: [memberId], references: [id])
  transactions ParkingTransaction[]
}

model ParkingTransaction {
  id              Int            @id @default(autoincrement())
  ticketNumber    String         @unique
  plateNumber     String
  vehicleType     VehicleType
  checkInTime     DateTime       @default(now())
  checkOutTime    DateTime?
  duration        Int?           // in minutes
  baseFee         Decimal?
  discount        Decimal?       @default(0)
  totalFee        Decimal?
  paymentMethod   PaymentMethod?
  paymentTime     DateTime?
  status          ParkingStatus  @default(ACTIVE)
  gate            String
  checkInPhoto    String?
  checkOutPhoto   String?
  checkInUserId   String
  checkOutUserId  String?
  vehicleId       Int?
  memberId        Int?
  voucherId       Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  checkInUser  User?    @relation("CheckInOperator", fields: [checkInUserId], references: [id])
  checkOutUser User?    @relation("CheckOutOperator", fields: [checkOutUserId], references: [id])
  vehicle      Vehicle? @relation(fields: [vehicleId], references: [id])
  member       Member?  @relation(fields: [memberId], references: [id])
  voucher      Voucher? @relation(fields: [voucherId], references: [id])

  @@index([plateNumber])
  @@index([status])
  @@index([checkInTime])
}

model Voucher {
  id             Int          @id @default(autoincrement())
  code           String       @unique
  description    String
  discountType   DiscountType
  discountValue  Decimal
  minPurchase    Decimal      @default(0)
  maxDiscount    Decimal?
  validFrom      DateTime
  validUntil     DateTime
  usageLimit     Int?
  usageCount     Int          @default(0)
  isActive       Boolean      @default(true)
  terminatedAt   DateTime?
  terminatedBy   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  transactions ParkingTransaction[]

  @@index([code])
  @@index([isActive])
}

model TopUpTransaction {
  id               Int      @id @default(autoincrement())
  memberId         Int
  amount           Decimal
  previousBalance  Decimal
  currentBalance   Decimal
  transactionDate  DateTime @default(now())
  operatorId       String
  createdAt        DateTime @default(now())

  member Member @relation(fields: [memberId], references: [id])
}