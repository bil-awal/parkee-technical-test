spring:
  application:
    name: parking-pos

  security:
    user:
      name: USERNAME
      password: PASSWORD

  # Konfigurasi Database PostgreSQL
  datasource:
    url: jdbc:postgresql://localhost:5434/parking_pos_db
    username: USERNAME # PLEASE INSERT YOUR USERNAME DB
    password: PASSWORD # PLEASE INSERT YOUR PASSWORD DB
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 600000
      connection-timeout: 30000

  # Konfigurasi JPA/Hibernate
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
    open-in-view: false

  # Konfigurasi Redis untuk caching dan session
  data:
    redis:
      host: localhost
      port: 6379
      password:
      timeout: 60000ms
      database: 0
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
        shutdown-timeout: 100ms

  # Konfigurasi Cache
  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1 hour
      cache-null-values: false
      use-key-prefix: true
      key-prefix: "parking_pos:"

  # Konfigurasi Flyway untuk database migration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    validate-on-migrate: true
    clean-disabled: true

  # Jackson Configuration untuk JSON
  jackson:
    serialization:
      write-dates-as-timestamps: false
      indent-output: true
    deserialization:
      fail-on-unknown-properties: false
    time-zone: Asia/Jakarta
    date-format: "yyyy-MM-dd'T'HH:mm:ss"

  # Konfigurasi File Upload/Multipart
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB # Increased for photo uploads
      max-request-size: 25MB # Increased for multiple files
      file-size-threshold: 2KB
      location: ${java.io.tmpdir}

# CORS Configuration
cors:
  allowed-origins:
    - http://localhost:3000
    - http://localhost:5173
    - http://localhost:5174
    - http://127.0.0.1:3000
    - http://127.0.0.1:5173
    - http://127.0.0.1:5174
  allowed-methods:
    - GET
    - POST
    - PUT
    - DELETE
    - PATCH
    - OPTIONS
    - HEAD
  allowed-headers:
    - "*"
  exposed-headers:
    - "Content-Disposition"
    - "Content-Type"
    - "Content-Length"
    - "Authorization"
  allow-credentials: true
  max-age: 3600

# Konfigurasi Server
server:
  port: 8081
  servlet:
    context-path: /api
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: on_param
    include-exception: false
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/plain,image/jpeg,image/png
  tomcat:
    max-swallow-size: 50MB # Support for large file uploads

# Konfigurasi Management Endpoints (Health Check & Monitoring)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,loggers,caches,threaddump,heapdump
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
    metrics:
      enabled: true
    caches:
      enabled: true
  health:
    redis:
      enabled: true
    db:
      enabled: true
    diskspace:
      enabled: true
      threshold: 104857600 # 100MB
  metrics:
    export:
      simple:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 50ms,100ms,200ms,400ms

# ==================== APPLICATION SPECIFIC CONFIGURATIONS ====================

# Application Configuration
app:
  base-url: http://localhost:8081
  photo-endpoint: /api/parking/photos
  name: Parking POS System
  version: 1.0.0
  description: Sistem Point of Sale untuk Parkir

  # JWT Configuration - NEW
  jwt:
    secret: "parkee-secret-key-for-jwt-token-generation-and-validation-2025-secure-key-minimum-256-bits"
    access-token-validity: 3600000  # 1 hour (3600 seconds = 3600000 ms)
    refresh-token-validity: 86400000 # 24 hours (86400 seconds = 86400000 ms)
    issuer: "parkee-pos"
    blacklist-cleanup-interval: 3600000 # 1 hour - cleanup expired blacklisted tokens

# File Upload Configuration
file-upload:
  base-path: ./uploads
  max-file-size: 10485760 # 10MB in bytes
  max-request-size: 26214400 # 25MB in bytes
  allowed-extensions: jpg,jpeg,png,gif,webp,bmp
  allowed-content-types:
    - image/jpeg
    - image/jpg
    - image/png
    - image/gif
    - image/webp
    - image/bmp
  create-directories: true
  temp-directory: ${java.io.tmpdir}/parking-uploads
  cleanup:
    enabled: true
    retention-days: 30 # Keep files for 30 days
    schedule: "0 0 2 * * *" # Daily cleanup at 2 AM

# Konfigurasi Aplikasi Parking
parking:
  rate-per-hour: 3000
  currency: IDR
  timezone: Asia/Jakarta
  grace-period-minutes: 15 # Grace period sebelum charge
  max-parking-hours: 24 # Maksimal durasi parkir
  business-hours:
    open: "06:00"
    close: "22:00"

  # Photo Configuration
  photos:
    required:
      check-in: false # Photo optional saat check-in
      check-out: false # Photo optional saat check-out
    quality:
      compression: 0.8 # JPEG compression quality
      max-width: 1920
      max-height: 1080
    thumbnails:
      enabled: true
      width: 300
      height: 200

  # Payment Configuration
  payment:
    methods:
      cash: true
      member-balance: true
      qris: true
      emoney: true
      flazz: true
      brizzi: true
      tapcash: true
    timeout-seconds: 300 # 5 minutes payment timeout

  # Cache Configuration
  cache:
    active-tickets-ttl: 3600 # 1 hour
    parking-stats-ttl: 86400 # 24 hours
    member-info-ttl: 1800 # 30 minutes

  # Security Configuration
  security:
    plate-validation:
      pattern: "^[A-Z]{1,2}\\s?\\d{1,4}\\s?[A-Z]{1,3}$" # Indonesian plate format
      max-length: 15
    photo-validation:
      virus-scan: false # Enable if antivirus service available
      metadata-removal: true # Remove EXIF data for privacy

# Konfigurasi SpringDoc OpenAPI/Swagger
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operations-sorter: method
    tags-sorter: alpha
    try-it-out-enabled: true
    display-request-duration: true
    show-extensions: true
    show-common-extensions: true
  packages-to-scan: com.parkee.parkingpos.controller

# Logging Configuration
logging:
  level:
    root: INFO
    com.parkee.parkingpos: DEBUG
    com.parkee.parkingpos.service: DEBUG
    com.parkee.parkingpos.controller: DEBUG
    com.parkee.parkingpos.util: DEBUG
    org.springframework.web: INFO
    org.springframework.web.multipart: DEBUG
    org.springframework.data.redis: INFO
    org.springframework.cache: DEBUG
    io.lettuce: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.flywaydb: INFO
    org.springframework.security: INFO
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
  file:
    name: logs/parking-pos.log
    max-size: 10MB
    max-history: 30
    total-size-cap: 300MB
  logback:
    rollingpolicy:
      clean-history-on-start: true

# Application Info (untuk actuator/info endpoint)
info:
  app:
    name: "@project.name@"
    description: "@project.description@"
    version: "@project.version@"
    encoding: "@project.build.sourceEncoding@"
    java:
      version: "@java.version@"
  parking:
    features:
      - "Check-in/Check-out"
      - "Photo Upload"
      - "Member Management"
      - "Voucher System"
      - "Payment Processing"
      - "Real-time Monitoring"
      - "JWT Authentication" # NEW
    supported-vehicles:
      - "CAR"
      - "MOTORCYCLE"
      - "TRUCK"
      - "BUS"
    supported-payments:
      - "CASH"
      - "MEMBER_BALANCE"
      - "QRIS"
      - "EMONEY"
      - "FLAZZ"
      - "BRIZZI"
      - "TAPCASH"
    authentication:
      type: "JWT"
      token-validity: "1 hour"
      refresh-validity: "24 hours"

# ==================== PROFILES CONFIGURATION ====================

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev

logging:
  level:
    com.parkee.parkingpos: TRACE
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG

app:
  base-url: http://localhost:8081
  jwt:
    secret: "dev-parkee-secret-key-for-development-only-not-secure"
    access-token-validity: 7200000  # 2 hours in dev
    refresh-token-validity: 172800000 # 48 hours in dev

file-upload:
  base-path: ./uploads-dev

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod

  jpa:
    properties:
      hibernate:
        show_sql: false
        format_sql: false

logging:
  level:
    root: WARN
    com.parkee.parkingpos: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: WARN

app:
  base-url: https://your-domain.com
  jwt:
    secret: ${JWT_SECRET:your-very-secure-production-secret-key-here-change-this}
    access-token-validity: 1800000   # 30 minutes in production for security
    refresh-token-validity: 86400000 # 24 hours
    blacklist-cleanup-interval: 1800000 # 30 minutes

file-upload:
  base-path: /var/uploads/parking-pos
  cleanup:
    retention-days: 90 # Keep files longer in production

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics

cors:
  allowed-origins:
    - https://your-frontend-domain.com
    - https://your-admin-domain.com

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect

  data:
    redis:
      host: localhost
      port: 6370 # Different port for test

app:
  jwt:
    secret: "test-secret-key-not-secure"
    access-token-validity: 60000     # 1 minute for fast testing
    refresh-token-validity: 300000   # 5 minutes for testing

file-upload:
  base-path: ./uploads-test

parking:
  rate-per-hour: 1000 # Lower rate for testing